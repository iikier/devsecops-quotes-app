# ========================================
# PIPELINE DEVSECOPS - GITHUB ACTIONS
# ========================================
# Pipeline completo com seguran√ßa integrada: SAST, Container Security, Dependency Scanning

name: üõ°Ô∏è DevSecOps Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'
  ECR_REPOSITORY: 'devsecops-quotes-dev'

jobs:
  # ========================================
  # STAGE 1: SETUP & LINT
  # ========================================
  setup-and-lint:
    name: üîç Setup & Code Quality
    runs-on: ubuntu-latest
    outputs:
      changed-files: ${{ steps.changes.outputs.any }}
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üßπ ESLint Check
        run: |
          npm install eslint --save-dev
          npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0 || echo "ESLint warnings found"

      - name: üîç Detect Changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            any:
              - '**/*.js'
              - '**/*.json'
              - '**/Dockerfile'
              - '**/*.tf'

  # ========================================
  # STAGE 2: SECURITY SCANS
  # ========================================
  security-scanning:
    name: üõ°Ô∏è Security Scanning
    runs-on: ubuntu-latest
    needs: setup-and-lint
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      # Dependency Vulnerability Scanning
      - name: üîç Dependency Scan - npm audit
        run: |
          echo "üì¶ Running npm audit..."
          npm audit --audit-level=moderate --json > npm-audit.json || true
          
          # Se houver vulnerabilidades cr√≠ticas, falhar o pipeline
          CRITICAL=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
          
          echo "üö® Critical vulnerabilities: $CRITICAL"
          echo "‚ö†Ô∏è High vulnerabilities: $HIGH"
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found! Pipeline failed."
            exit 1
          fi

      # Infrastructure Scanning
      - name: üîç IaC Scan - Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov.sarif
        continue-on-error: true

      - name: üì§ Upload Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            npm-audit.json
            checkov.sarif

  # ========================================
  # STAGE 3: BUILD & TEST
  # ========================================
  build-and-test:
    name: üî® Build & Test
    runs-on: ubuntu-latest
    needs: [setup-and-lint, security-scanning]
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîë Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üß™ Run Tests
        run: |
          echo "Running tests..."
          # npm test
          echo "‚úÖ Tests passed (placeholder)"

      - name: üê≥ Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üê≥ Build and Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Container Security Scanning
      - name: üîç Container Scan - Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üîç Container Scan - Grype
        uses: anchore/scan-action@v3
        with:
          image: '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}'
          fail-build: false
          output-format: sarif
          output-file: grype-results.sarif

      - name: üì§ Upload Container Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-results
          path: |
            trivy-results.sarif
            grype-results.sarif

  # ========================================
  # STAGE 4: DEPLOY TO DEV
  # ========================================
  deploy-dev:
    name: üöÄ Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment: development
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîë Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ‚öôÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: üåç Get EC2 Public IP
        id: terraform-output
        run: |
          cd terraform
          terraform init -backend=false
          terraform output -raw application_public_ip > /tmp/ec2_ip.txt
          cat /tmp/ec2_ip.txt
        
      - name: üöÄ Deploy to EC2 via SSH
        env:
          EC2_IP: $(cat /tmp/ec2_ip.txt)
          ECR_REGISTRY: ${{ needs.build-and-test.outputs.registry }} # Assume o registry do job anterior
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Conectado ao servidor!"
            
            # Login no ECR a partir da inst√¢ncia EC2 (usa o IAM Role)
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
            
            # Pull da imagem mais recente
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            
            # Parar e remover o cont√™iner antigo, se existir
            docker stop devsecops-app || true
            docker rm devsecops-app || true
            
            # Rodar o novo cont√™iner
            docker run -d --name devsecops-app -p 3000:3000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            
            echo "üöÄ Implanta√ß√£o conclu√≠da com sucesso!"

  # ========================================
  # STAGE 5: MONITORING & NOTIFICATIONS
  # ========================================
  monitoring-setup:
    name: üìä Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: success()
    steps:
      - name: üìä Configure CloudWatch Alarms
        run: |
          echo "üìä Setting up monitoring and alerts..."
          
          # Criar alarm para CPU alta
          aws cloudwatch put-metric-alarm \
            --alarm-name "devsecops-quotes-dev-high-cpu" \
            --alarm-description "High CPU utilization" \
            --metric-name CPUUtilization \
            --namespace AWS/EC2 \
            --statistic Average \
            --period 300 \
            --threshold 80 \
            --comparison-operator GreaterThanThreshold \
            --evaluation-periods 2 \
            --alarm-actions arn:aws:sns:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:devsecops-alerts

      - name: üîî Notify Deployment Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: 'üöÄ DevSecOps Pipeline completed successfully! Application deployed to development environment.'

  # ========================================
  # FAILURE NOTIFICATION
  # ========================================
  notify-failure:
    name: üö® Notify Failure
    runs-on: ubuntu-latest
    needs: [setup-and-lint, security-scanning, build-and-test, deploy-dev]
    if: failure()
    steps:
      - name: üö® Notify Pipeline Failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: '‚ùå DevSecOps Pipeline failed! Please check the logs and fix the issues.'

  # ========================================
  # STAGE 5: POST-DEPLOYMENT (Futuro)
  # ========================================
  post-deployment-tests:
    name: üí® Post-Deployment Checks
    runs-on: ubuntu-latest
    needs: deploy-dev
    steps:
      - name: üåê Run Health Check
        run: |
          echo "Verificando a sa√∫de da aplica√ß√£o..."
          # curl -f http://<IP_DA_INSTANCIA>:3000/health
          echo "‚úÖ Aplica√ß√£o est√° saud√°vel!" 