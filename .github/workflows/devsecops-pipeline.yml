# ========================================
# PIPELINE DEVSECOPS - APLICAÇÃO
# ========================================
# Foco: Build, teste, scan de segurança, containerização e deploy da aplicação.

name: 🚀 DevSecOps Pipeline - Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'
  ECR_REPOSITORY: 'devsecops-quotes-dev'
  EC2_INSTANCE_NAME: 'devsecops-quotes-dev-instance'

jobs:
  # ========================================
  # JOB 1: BUILD & TEST
  # ========================================
  build-and-test:
    name: 🔧 Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧪 Run Tests
        run: npm test
        continue-on-error: true

      - name: 🔍 Code Quality Check
        run: npm run lint || echo "Linting completed with warnings"
        continue-on-error: true

  # ========================================
  # JOB 2: SECURITY SCANS
  # ========================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 SAST - CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
        continue-on-error: true

      - name: 🔍 SAST - CodeQL Analyze
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

      - name: 🔍 Dependency Vulnerability Scan
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        continue-on-error: true

  # ========================================
  # JOB 3: DOCKER BUILD & SCAN
  # ========================================
  docker-build-and-scan:
    name: 🐳 Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🐳 Build Docker Image
        run: |
          docker build -t $ECR_REPOSITORY:$GITHUB_SHA .
          docker tag $ECR_REPOSITORY:$GITHUB_SHA $ECR_REPOSITORY:latest

      - name: 🔍 Container Security Scan - Grype
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          fail-build: false

      - name: 📤 Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag $ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: 📝 Output Image URI
        id: image-uri
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA" >> $GITHUB_OUTPUT

    outputs:
      image-uri: ${{ steps.image-uri.outputs.image-uri }}

  # ========================================
  # JOB 4: DEPLOY TO EC2
  # ========================================
  deploy-to-ec2:
    name: 🚀 Deploy to EC2
    runs-on: ubuntu-latest
    needs: docker-build-and-scan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    # Define o ambiente para forçar a aprovação manual
    environment:
      name: development
      url: 'https://console.aws.amazon.com'

    steps:
      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Get EC2 Instance ID
        id: get-instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=$EC2_INSTANCE_NAME" \
                     "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text)
          
          if [ "$INSTANCE_ID" = "None" ] || [ -z "$INSTANCE_ID" ]; then
            echo "❌ EC2 instance not found or not running"
            exit 1
          fi
          
          echo "instance-id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "✅ Found EC2 instance: $INSTANCE_ID"

      - name: 🚀 Deploy Application via SSM
        env:
          INSTANCE_ID: ${{ steps.get-instance.outputs.instance-id }}
          IMAGE_URI: ${{ needs.docker-build-and-scan.outputs.image-uri }}
        run: |
          # Comando para fazer o deploy da aplicação
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo \"🔄 Starting deployment...\"",
              "sudo docker stop devsecops-app || true",
              "sudo docker rm devsecops-app || true",
              "echo \"🔐 Logging into ECR...\"",
              "aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
              "echo \"📥 Pulling new image...\"",
              "sudo docker pull '$IMAGE_URI'",
              "echo \"🚀 Starting new container...\"",
              "sudo docker run -d --name devsecops-app -p 3000:3000 --restart unless-stopped '$IMAGE_URI'",
              "echo \"✅ Deployment completed successfully!\"",
              "echo \"🔍 Container status:\"",
              "sudo docker ps | grep devsecops-app"
            ]' \
            --comment "Deploy application from GitHub Actions" \
            --timeout-seconds 300

      - name: ✅ Verify Deployment
        env:
          INSTANCE_ID: ${{ steps.get-instance.outputs.instance-id }}
        run: |
          echo "⏳ Waiting for deployment to complete..."
          sleep 30
          
          # Verificar se o container está rodando
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "curl -f http://localhost:3000 || exit 1",
              "echo \"✅ Application is responding correctly!\""
            ]' \
            --comment "Verify application health" \
            --timeout-seconds 60 